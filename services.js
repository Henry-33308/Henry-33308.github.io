document.addEventListener("DOMContentLoaded", function() {
    loadServices();
});

// Danh s√°ch d·ªãch v·ª• c√≥ s·∫µn v·ªõi m√¥ t·∫£ chi ti·∫øt
let services = [
    { id: 1, name: "C·∫Øt t√≥c nam", price: 100000, description: "C·∫Øt t√≥c nam theo phong c√°ch hi·ªán ƒë·∫°i, g·ªçn g√†ng." },
    { id: 2, name: "C·∫Øt t√≥c n·ªØ", price: 150000, description: "C·∫Øt t√≥c n·ªØ theo xu h∆∞·ªõng m·ªõi nh·∫•t, t·∫°o ki·ªÉu ƒë·∫πp." },
    { id: 3, name: "Nhu·ªôm t√≥c", price: 300000, description: "Nhu·ªôm t√≥c v·ªõi m√†u s·∫Øc ƒëa d·∫°ng, gi·ªØ m√†u l√¢u." },
    { id: 4, name: "U·ªën t√≥c", price: 400000, description: "U·ªën t√≥c t·ª± nhi√™n, b·ªìng b·ªÅnh, gi·ªØ n·∫øp l√¢u d√†i." },
    { id: 5, name: "D∆∞·ª°ng t√≥c", price: 250000, description: "D∆∞·ª°ng t√≥c chuy√™n s√¢u, ph·ª•c h·ªìi t√≥c h∆∞ t·ªïn." }
];

// Danh s√°ch d·ªãch v·ª• b·ªï sung v·ªõi m√¥ t·∫£
let additionalServices = [
    { name: "C·∫Øt t√≥c layer n·ªØ", price: 180000, description: "C·∫Øt t√≥c layer t·∫°o ki·ªÉu b·ªìng b·ªÅnh, tr·∫ª trung." },
    { name: "C·∫Øt t√≥c undercut nam", price: 120000, description: "T·∫°o ki·ªÉu undercut nam g·ªçn g√†ng, m·∫°nh m·∫Ω." },
    { name: "U·ªën t√≥c setting", price: 500000, description: "U·ªën t√≥c setting gi·ªØ n·∫øp l√¢u, t·∫°o ki·ªÉu t·ª± nhi√™n." },
    { name: "Du·ªói t√≥c collagen", price: 450000, description: "Du·ªói t√≥c b·∫±ng collagen gi√∫p t√≥c m·ªÅm m∆∞·ª£t h∆°n." },
    { name: "H·∫•p d·∫ßu ph·ª•c h·ªìi t√≥c", price: 250000, description: "H·∫•p d·∫ßu gi√∫p t√≥c b√≥ng m∆∞·ª£t, ph·ª•c h·ªìi h∆∞ t·ªïn." },
    { name: "G·ªôi ƒë·∫ßu d∆∞·ª°ng sinh", price: 150000, description: "G·ªôi ƒë·∫ßu k·∫øt h·ª£p massage th∆∞ gi√£n, l∆∞u th√¥ng m√°u." },
    { name: "Massage da ƒë·∫ßu", price: 200000, description: "Massage da ƒë·∫ßu gi√∫p gi·∫£m stress, k√≠ch th√≠ch m·ªçc t√≥c." },
    { name: "T·∫©y t√≥c b·∫°ch kim", price: 600000, description: "T·∫©y t√≥c m√†u b·∫°ch kim c·ª±c s√°ng, l√™n m√†u chu·∫©n." },
    { name: "Nhu·ªôm highlight", price: 350000, description: "Nhu·ªôm highlight gi√∫p t√≥c n·ªïi b·∫≠t v√† c√° t√≠nh h∆°n." },
    { name: "Ph·ªß b√≥ng t√≥c", price: 280000, description: "Ph·ªß b√≥ng gi√∫p t√≥c m·ªÅm m∆∞·ª£t, b√≥ng kh·ªèe t·ª± nhi√™n." }
];

// Th√™m danh s√°ch m·ªü r·ªông v√†o m·∫£ng services
services = services.concat(additionalServices.map((s, index) => ({
    id: services.length + index + 1,
    ...s
})));

// Hi·ªÉn th·ªã danh s√°ch d·ªãch v·ª•
function loadServices() {
    let table = document.getElementById("serviceTable");
    table.innerHTML = "";

    services.forEach((service, index) => {
        let row = table.insertRow();
        row.innerHTML = `
            <td>${service.id}</td>
            <td>${service.name}</td>
            <td>${service.price.toLocaleString()} VNƒê</td>
            <td>${service.description}</td>
            <td>
                <button class="edit-btn" onclick="editService(${index})">‚úè S·ª≠a</button>
                <button class="delete-btn" onclick="deleteService(${index})">üóë X√≥a</button>
            </td>
        `;
    });

    // C·∫≠p nh·∫≠t danh s√°ch dropdown trong form
    updateServiceDropdown();
}

// C·∫≠p nh·∫≠t danh s√°ch ch·ªçn d·ªãch v·ª• trong form
function updateServiceDropdown() {
    let select = document.getElementById("name");
    select.innerHTML = `<option value="">Ch·ªçn d·ªãch v·ª•...</option>`; // Reset danh s√°ch

    services.forEach(service => {
        let option = document.createElement("option");
        option.value = service.name;
        option.textContent = service.name;
        option.setAttribute("data-price", service.price);
        option.setAttribute("data-description", service.description);
        select.appendChild(option);
    });
}

// T·ª± ƒë·ªông c·∫≠p nh·∫≠t gi√° v√† m√¥ t·∫£ khi ch·ªçn d·ªãch v·ª•
function updatePriceAndDescription() {
    let serviceSelect = document.getElementById("name");
    let selectedOption = serviceSelect.options[serviceSelect.selectedIndex];
    let priceInput = document.getElementById("price");
    let descriptionInput = document.getElementById("description");

    if (selectedOption.dataset.price) {
        priceInput.value = selectedOption.dataset.price;
    } else {
        priceInput.value = "";
    }

    if (selectedOption.dataset.description) {
        descriptionInput.value = selectedOption.dataset.description;
    } else {
        descriptionInput.value = "";
    }
}

// M·ªü form th√™m d·ªãch v·ª•
function openServiceForm() {
    document.getElementById("formTitle").innerText = "Th√™m D·ªãch V·ª•";
    document.getElementById("serviceId").value = "";
    document.getElementById("name").value = "";
    document.getElementById("price").value = "";
    document.getElementById("description").value = "";
    document.getElementById("serviceForm").style.display = "flex";
}

// ƒê√≥ng form
function closeServiceForm() {
    document.getElementById("serviceForm").style.display = "none";
}

// L∆∞u d·ªãch v·ª• m·ªõi
function saveService() {
    let id = document.getElementById("serviceId").value;
    let name = document.getElementById("name").value;
    let price = document.getElementById("price").value;
    let description = document.getElementById("description").value || "Kh√¥ng c√≥ m√¥ t·∫£";

    if (name && price) {
        if (id) {
            services[id].name = name;
            services[id].price = price;
            services[id].description = description;
        } else {
            services.push({
                id: services.length + 1,
                name,
                price: parseInt(price),
                description
            });
        }
        closeServiceForm();
        loadServices();
    } else {
        alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!");
    }
}

// X√≥a d·ªãch v·ª•
function deleteService(index) {
    if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a d·ªãch v·ª• n√†y?")) {
        services.splice(index, 1);
        loadServices();
    }
}

// Ch·ªânh s·ª≠a d·ªãch v·ª•
function editService(index) {
    document.getElementById("formTitle").innerText = "S·ª≠a D·ªãch V·ª•";
    document.getElementById("serviceId").value = index;
    document.getElementById("name").value = services[index].name;
    document.getElementById("price").value = services[index].price;
    document.getElementById("description").value = services[index].description;
    document.getElementById("serviceForm").style.display = "flex";
}

// T√¨m ki·∫øm d·ªãch v·ª• theo t√™n
function searchService() {
    let input = document.getElementById("searchInput").value.toLowerCase();
    let filtered = services.filter(s => s.name.toLowerCase().includes(input));

    let table = document.getElementById("serviceTable");
    table.innerHTML = "";

    filtered.forEach((service, index) => {
        let row = table.insertRow();
        row.innerHTML = `
            <td>${service.id}</td>
            <td>${service.name}</td>
            <td>${service.price.toLocaleString()} VNƒê</td>
            <td>${service.description}</td>
            <td>
                <button class="edit-btn" onclick="editService(${index})">‚úè S·ª≠a</button>
                <button class="delete-btn" onclick="deleteService(${index})">üóë X√≥a</button>
            </td>
        `;
    });
}
